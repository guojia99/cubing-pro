package scramble

import (
	"fmt"
	"net/http"
	"net/url"
	"slices"

	"github.com/guojia99/cubing-pro/src/internel/utils"
)

const imageWith2mf8UrlFormal = "http://2mf8.cn:8888/api/%s/%s"

var supportTyp = []string{
	"111",
	"112",
	"133",
	"223",
	"233",
	"333",
	"334",
	"335",
	"336",
	"337",
	"444",
	"555",
	"888",
	"999",
	"2223",
	"2226",
	"101010",
	"111111",
	"blank",
	"333o",
	"444m",
	"555wca",
	"666p",
	"666wca",
	"666s",
	"666si",
	"777p",
	"777wca",
	"777s",
	"777si",
	"crz3a",
	"cm3",
	"cm2",
	"fto",
	"gear",
	"sfl",
	"ufo",
	"roux",
	"RrU",
	"RrUu",
	"minx2g",
	"lsll",
	"prco",
	"skb",
	"ivy",
	"eide",
	"sia113",
	"sia123",
	"sia222",
	"r234",
	"r2345",
	"r23456",
	"r234567",
	"r234w",
	"r2345w",
	"r23456w",
	"r234567w",
	"rmngf",
	"333ni",
	"444bld",
	"555bld",
	"5edge",
	"6edge",
	"7edge",
	"cubennn",
	"333ft",
	"333oh",
	"333fm",
	"edges",
	"corners",
	"333custom",
	"ll",
	"lsll2",
	"f2l",
	"zbll",
	"zzll",
	"zbls",
	"ttll",
	"eols",
	"wvls",
	"vls",
	"lse",
	"cmll",
	"cll",
	"coll",
	"ell",
	"pll",
	"oll",
	"2gll",
	"sbrx",
	"half",
	"333drud",
	"3gen_F",
	"3gen_L",
	"2gen",
	"2genl",
	"mt3qb",
	"mteole",
	"mttdr",
	"mt6cp",
	"mtl5ep",
	"mtcdrll",
	"easyc",
	"easyxc",
	"eoline",
	"444wca",
	"4edge",
	"444edo",
	"444cto",
	"444ll",
	"444ell",
	"444ctud",
	"444ctrl",
	"444l8e",
	"444ud3c",
	"444rlda",
	"444rlca",
	"sqrs",
	"sqrcsp",
	"sq1pll",
	"pyro",
	"pyrso",
	"pyrnb",
	"pyr4c",
	"pyrl4e",
	"mpyrso",
	"skbo",
	"skbso",
	"skbnb",
	"ivyo",
	"ivyso",
	"222o",
	"222so",
	"222nb",
	"222eg0",
	"222eg1",
	"222eg2",
	"222tcp",
	"222tcn",
	"222tc",
	"222lsall",
	"222eg",
	"gearo",
	"gearso",
	"clko",
	"lsemu",
	"mlsll",
	"mgmpll",
	"mgmll",
	"klmso",
	"ftoso",
	"ftol3t",
	"ftol4t",
	"rediso",
	"15prp",
	"15prap",
	"15prmp",
	"8prp",
	"8prap",
	"8prmp",
	"444yj",
	"bic",
	"15p",
	"15pm",
	"15pat",
	"clkwca",
	"clkwcab",
	"clknf",
	"clk",
	"clkc",
	"clke",
	"giga",
	"mgmo",
	"mgmp",
	"mgmc",
	"klmp",
	"heli",
	"helicv",
	"heli2x2",
	"heli2x2g",
	"redi",
	"redim",
	"pyrm",
	"prcp",
	"mpyr",
	"r3",
	"r3ni",
	"sq1h",
	"sq1t",
	"sq2",
	"ssq1t",
	"bsq",
	"ctico",
	"-1",
	"333noob",
	"lol",
}

var csTimerEventMap = map[string]string{
	"clock": "clkwca",
	"minx":  "mgmo",
	"pyram": "pyrm",
	"skewb": "skb",
	"sq-1":  "sqrs",
	"sq1":   "sqrs",
	"666":   "666wca",
	"777":   "777wca",
	"333bf": "333",
	"444bf": "444",
	"555bf": "555wca",
}

func (s *scramble) SImageWith2mf8(str string, ev string) (string, error) {
	m, ok := csTimerEventMap[ev]
	if ok {
		ev = m
	}

	if !slices.Contains(supportTyp, ev) {
		return "", fmt.Errorf("unknown event type %s", ev)
	}

	//str = strings.ReplaceAll(str, "\n", " ")
	//str = strings.ReplaceAll(str, " ", "")
	encodedStr := url.PathEscape(str)
	out, err := utils.HTTPRequestFullWithTimeout(http.MethodGet, fmt.Sprintf(imageWith2mf8UrlFormal, ev, encodedStr), nil, nil, nil, 3)
	if err != nil {
		return "", err
	}

	if out.StatusCode != 200 {
		return "", fmt.Errorf("bad status code %d", out.StatusCode)
	}
	return string(out.Body), err
}
